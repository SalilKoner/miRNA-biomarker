x <- as.numeric(dis[i,])
y <- as.numeric(nor[i,])
regulation[i] <- ifelse(median(x-y, na.rm=TRUE)>0,1,-1)
}
cbind(pv, regulation)
}
# t-test without median imputation
pval <- pool.t.test(mydata)[, 1]
# t-tester direction diche, vector of length 522
regulation <- pool.t.test(mydata)[, 2]
####################################################################
################# Group assignments ###########################
####################################################################
group.info <- mydata %>% group_by(Chr, strand, centro) %>%
summarize(freq=n()) %>%
group_by(Chr, strand) %>%
mutate(min_freq=min(freq), centro_new=ifelse(min_freq == 1, 2-row_number(), 1)) %>%
ungroup() %>%
mutate(group_id = cumsum(centro_new)) %>% select(Chr, strand, centro, group_id)
group <- mydata %>% inner_join(group.info, by = c("Chr", "strand", "centro")) %>% pull(group_id)
#gives number of missing pairs for 522 genes
miss.val <- read.table("miss.txt",header=TRUE)
#The number of groups
K <- max(group)
# The assihnment into groups
assign <- as.list(1:K)
for(i in 1:K){
assign[[i]] <- which(group==i)
}
#################################################################
################# Auxilliary functions for #######################
################# calculating inclusion probability ##############
##################################################################
#___________________________ LSL ______________________________________
# g is the sorted p-values of a g
lsl <- function(g)
{
g <- sort(g)
ng <- length(g)
lg <- (ng+1-1:ng)/(1-g)
#What happens if ng=1, which means the cluster has length only 1?
i=2
while(lg[i]<lg[i-1])
{
if(i==ng)
break
i=i+1
}
min((floor(lg)+1)/ng, 1)
}
#__________________________ TST procedure _____________________________________________
tst <- function(g, al)
{
al <- al/(1+al)
#why this is 0.05?
r <- BH(g, al)$Rejections
ng <- length(g)
(ng-r)/ng
}
###################################################################
###################### Main function ##############################
###################################################################
# Method: lsl or tst
# chr and mydata comes from the sourced R files
#---------------------  GBH ----------------------------------------------------
gbh <- function(al,pval,group,assign, mydata, method, chr)
{
n <- length(pval)
wp <- 1:n
k <- length(assign)
s <- 0
for(i in 1:k)
{
ind <- assign[[i]]
ng <- length(ind)
if (method=="tst")
{pig <- tst(pval[ind], al)} else { pig <- lsl(pval[ind])}
s <- ng*pig+s
wp[ind] <- pig*pval[ind]/(1-pig)
}
pio <- s/n
ial <- al
if (method=="tst")
al <- al/(1+al)
#pi-hat is pio, aw alpha-w, wp is p-w
aw <- al/(1-pio)
swp <- sort(wp)
vec <- (c(1:n)*aw)/n
i=1
while(swp[i]<=vec[i])
i=i+1
i=i-1
if (i==0) return(0)
cut <- swp[i]
name <- which(wp<=cut)
class.prob <- name #Probability of the classes where the significant genes belong
print(length(name))
for(i in 1:length(name))
if(method=="tst")
{
class.prob[i] <- tst(pval[assign[[group[name[i]]]]], ial)
} else {class.prob[i] <- lsl(pval[assign[[group[name[i]]]]])}
data.frame(mydata[name,c(1:3,5)], pval= round(pval[name],4),
missing = miss.val[name,1], regulation = regulation[name],
group_id = group[name],
type=toupper(method))
}
##################################################################
################    Application ##################################
##################################################################
# Change ALPHA here
alpha.fix <- 0.05
#------------------- BH--------------------------------------------
bh <- p.adjust(pval, method="BH")
name <- which(bh < alpha.fix)
if(length(name)==0) print("Error: no tests are significant for BH")
my.bh <- data.frame(mydata[name,c(1:3,5)], pval= round(pval[name],4),
missing = miss.val[name,1], regulation = regulation[name],
group_id = group[name],
type="BH")
#------------------- LSL GBH ----------------------------------------------------------
#al: alpha
# pval: pvalue
# group: read kora hoechilo, asign ei filei defined hoeche
lsl.gbh <- gbh(alpha.fix, pval, group, assign, mydata, "lsl", chr)
# I don't know why chr is there, probably will run without this chr.
# probably does not need chr
# jodi chr dite chas tahole mydata$Chr etar elementgulo (23ta unique elements)
# etake input hisabe use koris.
#-------------------- TST GBH ----------------------------------------------------------
# al is the level
tst.gbh <- gbh(alpha.fix, pval, group, assign, mydata, "tst", chr)
#-------------------- SABHA Method  ----------------------------------------------------------
source('All_q_est_functions.R')
tau = 0.5; eps = 0.1 # parameters for SABHA # Robust to the choice of eps
ADMM_params = c(10^2, 10^3, 2, 5000, 1e-3) # alpha_ADMM,beta,eta,max_iters,converge_thr
SABHA_method = function(pvals, qhat, alpha, tau){
# Use the original, or estimated q as input
pvals[pvals>tau] = Inf
khat=max(c(0,which(sort(qhat*pvals)<=alpha*(1:length(pvals))/length(pvals))))
which(qhat*pvals<=alpha*khat/length(pvals))
}
qhat = Solve_q_block(pval,tau,eps,group,ADMM_params)
SABHA_Res = rep(0,length(pval))
SABHA_Res[SABHA_method(pval,qhat,alpha.fix,tau)] = 1
name <- which(SABHA_Res==1)
if(length(name)==0) print("Error: no tests are significant for SABHA")
sabha <- data.frame(mydata[name,c(1:3,5)], pval= round(pval[name],4),
missing = miss.val[name,1], regulation = regulation[name],
group_id = group[name],
type="SABHA")
discoveries <- full_join(my.bh, tst.gbh, by = names(my.bh)[-length(names(my.bh))], suffix = c("_BH", "_TST")) %>%
full_join(lsl.gbh, by = names(my.bh)[-length(names(my.bh))]) %>%
full_join(sabha, by = names(my.bh)[-length(names(my.bh))], suffix = c("_LSL", "_SABHA")) %>%
unite(signif_tests, starts_with("type"), na.rm = TRUE, sep=", ") %>%
mutate(n_sig = stringi::stri_count_words(signif_tests) )
#diseased
dis <- mydata[,6:23]
#normal people
nor <- mydata[,24:41]
ddct <- dis-nor
temp2 <- data.frame(mydata.info, ddct=apply(ddct, 2, mean, na.rm=TRUE))
#Joining my_table with distance and average ddct value
temp1 <- subset(temp2, MiR %in% discoveries$MiR,
select = c(ddct,start_coordinate))
discoveries.for.nyabada <- data.frame(discoveries, temp1)
discoveries.for.nyabada
discoveries
do.impute <- FALSE
######################## Loading packages #######################
library(sgof)
library(tidyr)
library(dplyr)
library(xtable)
library(gridExtra)
library(tidyverse)
library(RColorBrewer)
source("Preparing_data.R")
####################################################################
################# t-test and the p-values ###########################
####################################################################
regulation <- rep(0, nrow(mydata))
#--------------------- t-test  --------------------------
#The NA values are omitted
my.t.test <- function(x,y)
{
if(median(x-y, na.rm = TRUE)>0)
pval <- t.test(x,y, alternative="greater", mu=1, paired=TRUE,  na.action=na.omit)$p.value
if(median(x-y, na.rm=TRUE)<0)
pval <- t.test(x,y, alternative="less", mu=-1, paired=TRUE,  na.action=na.omit)$p.value
pval
}
#------------------- The main function for t-test ------------------------------
pool.t.test <- function(mydata, impute=do.impute)
{
n <- nrow(mydata)
#diseased people
dis <- mydata[,6:23]
#normal people
nor <- mydata[,24:41]
#dis <- mean_impute(dis)
#nor <- mean_impute(nor)
#---------Imputation
if(impute){
dis <- median_impute(dis)
nor <- median_impute(nor)
}
pv <- c(1:n)
for (i in 1:n)
{
pv[i] <-my.t.test(as.numeric(dis[i,]), as.numeric(nor[i,]))
x <- as.numeric(dis[i,])
y <- as.numeric(nor[i,])
regulation[i] <- ifelse(median(x-y, na.rm=TRUE)>0,1,-1)
}
cbind(pv, regulation)
}
# t-test without median imputation
pval <- pool.t.test(mydata)[, 1]
# t-tester direction diche, vector of length 522
regulation <- pool.t.test(mydata)[, 2]
####################################################################
################# Group assignments ###########################
####################################################################
group.info <- mydata %>% group_by(Chr, strand, centro) %>%
summarize(freq=n()) %>%
group_by(Chr, strand) %>%
mutate(min_freq=min(freq), centro_new=ifelse(min_freq == 1, 2-row_number(), 1)) %>%
ungroup() %>%
mutate(group_id = cumsum(centro_new)) %>% select(Chr, strand, centro, group_id)
group <- mydata %>% inner_join(group.info, by = c("Chr", "strand", "centro")) %>% pull(group_id)
#gives number of missing pairs for 522 genes
miss.val <- read.table("miss.txt",header=TRUE)
#The number of groups
K <- max(group)
# The assihnment into groups
assign <- as.list(1:K)
for(i in 1:K){
assign[[i]] <- which(group==i)
}
#################################################################
################# Auxilliary functions for #######################
################# calculating inclusion probability ##############
##################################################################
#___________________________ LSL ______________________________________
# g is the sorted p-values of a g
lsl <- function(g)
{
g <- sort(g)
ng <- length(g)
lg <- (ng+1-1:ng)/(1-g)
#What happens if ng=1, which means the cluster has length only 1?
i=2
while(lg[i]<lg[i-1])
{
if(i==ng)
break
i=i+1
}
min((floor(lg)+1)/ng, 1)
}
#__________________________ TST procedure _____________________________________________
tst <- function(g, al)
{
al <- al/(1+al)
#why this is 0.05?
r <- BH(g, al)$Rejections
ng <- length(g)
(ng-r)/ng
}
###################################################################
###################### Main function ##############################
###################################################################
# Method: lsl or tst
# chr and mydata comes from the sourced R files
#---------------------  GBH ----------------------------------------------------
gbh <- function(al,pval,group,assign, mydata, method, chr)
{
n <- length(pval)
wp <- 1:n
k <- length(assign)
s <- 0
for(i in 1:k)
{
ind <- assign[[i]]
ng <- length(ind)
if (method=="tst")
{pig <- tst(pval[ind], al)} else { pig <- lsl(pval[ind])}
s <- ng*pig+s
wp[ind] <- pig*pval[ind]/(1-pig)
}
pio <- s/n
ial <- al
if (method=="tst")
al <- al/(1+al)
#pi-hat is pio, aw alpha-w, wp is p-w
aw <- al/(1-pio)
swp <- sort(wp)
vec <- (c(1:n)*aw)/n
i=1
while(swp[i]<=vec[i])
i=i+1
i=i-1
if (i==0) return(0)
cut <- swp[i]
name <- which(wp<=cut)
class.prob <- name #Probability of the classes where the significant genes belong
print(length(name))
for(i in 1:length(name))
if(method=="tst")
{
class.prob[i] <- tst(pval[assign[[group[name[i]]]]], ial)
} else {class.prob[i] <- lsl(pval[assign[[group[name[i]]]]])}
data.frame(mydata[name,c(1:3,5)], pval= round(pval[name],4),
missing = miss.val[name,1], regulation = regulation[name],
group_id = group[name],
type=toupper(method))
}
##################################################################
################    Application ##################################
##################################################################
# Change ALPHA here
alpha.fix <- 0.05
#------------------- BH--------------------------------------------
bh <- p.adjust(pval, method="BH")
name <- which(bh < alpha.fix)
if(length(name)==0) print("Error: no tests are significant for BH")
my.bh <- data.frame(mydata[name,c(1:3,5)], pval= round(pval[name],4),
missing = miss.val[name,1], regulation = regulation[name],
group_id = group[name],
type="BH")
#------------------- LSL GBH ----------------------------------------------------------
#al: alpha
# pval: pvalue
# group: read kora hoechilo, asign ei filei defined hoeche
lsl.gbh <- gbh(alpha.fix, pval, group, assign, mydata, "lsl", chr)
# I don't know why chr is there, probably will run without this chr.
# probably does not need chr
# jodi chr dite chas tahole mydata$Chr etar elementgulo (23ta unique elements)
# etake input hisabe use koris.
#-------------------- TST GBH ----------------------------------------------------------
# al is the level
tst.gbh <- gbh(alpha.fix, pval, group, assign, mydata, "tst", chr)
#-------------------- SABHA Method  ----------------------------------------------------------
source('All_q_est_functions.R')
tau = 0.5; eps = 0.1 # parameters for SABHA # Robust to the choice of eps
ADMM_params = c(10^2, 10^3, 2, 5000, 1e-3) # alpha_ADMM,beta,eta,max_iters,converge_thr
SABHA_method = function(pvals, qhat, alpha, tau){
# Use the original, or estimated q as input
pvals[pvals>tau] = Inf
khat=max(c(0,which(sort(qhat*pvals)<=alpha*(1:length(pvals))/length(pvals))))
which(qhat*pvals<=alpha*khat/length(pvals))
}
qhat = Solve_q_block(pval,tau,eps,group,ADMM_params)
SABHA_Res = rep(0,length(pval))
SABHA_Res[SABHA_method(pval,qhat,alpha.fix,tau)] = 1
name <- which(SABHA_Res==1)
if(length(name)==0) print("Error: no tests are significant for SABHA")
sabha <- data.frame(mydata[name,c(1:3,5)], pval= round(pval[name],4),
missing = miss.val[name,1], regulation = regulation[name],
group_id = group[name],
type="SABHA")
discoveries <- full_join(my.bh, tst.gbh, by = names(my.bh)[-length(names(my.bh))], suffix = c("_BH", "_TST")) %>%
full_join(lsl.gbh, by = names(my.bh)[-length(names(my.bh))]) %>%
full_join(sabha, by = names(my.bh)[-length(names(my.bh))], suffix = c("_LSL", "_SABHA")) %>%
unite(signif_tests, starts_with("type"), na.rm = TRUE, sep=", ") %>%
mutate(n_sig = stringi::stri_count_words(signif_tests) )
discoveries
#diseased
dis <- mydata[,6:23]
#normal people
nor <- mydata[,24:41]
ddct <- dis-nor
temp2 <- data.frame(mydata.info, ddct=apply(ddct, 2, mean, na.rm=TRUE))
#Joining my_table with distance and average ddct value
temp1 <- subset(temp2, MiR %in% discoveries$MiR,
select = c(ddct,start_coordinate))
discoveries.for.nyabada <- data.frame(discoveries, temp1)
discoveries.for.nyabada
# For plotting the data:
deltaCT_dat <- mydata
names(deltaCT_dat) <- c(names(mydata)[1:5], paste0("Subj", 1:18, "_C"), paste0("Subj", 1:18, "_N"))
deltaCT_dat = deltaCT_dat %>% pivot_longer(
cols = starts_with("Subj"),
names_prefix = "Subj",
names_sep = "_",
names_to = c("Subject", "Gene_type")
) %>%
mutate(Subject = as.numeric(Subject)) %>%
group_by(MiR, Chr, strand, start_coordinate, centro, Subject) %>%
summarize(deltaCT = value[Gene_type == "C"] - value[Gene_type == "N"], .groups = "drop") %>%
pivot_wider(names_from = "Subject", values_from = "deltaCT", names_prefix = "Subj")
plotdat <- deltaCT_dat %>% inner_join(discoveries) %>% arrange(desc(pval))
delCT.matrix <- plotdat %>% dplyr::select(starts_with("Subj")) %>% as.matrix
rownames(delCT.matrix) <- plotdat$MiR
colnames(delCT.matrix) <- paste0('ID ', 1:18)
superheat::superheat(delCT.matrix,
# set heatmap color map
heat.pal = brewer.pal(5, "RdBu"),
heat.na.col = "grey50",
yr = plotdat$pval,
yr.plot.type = "bar",
yr.axis.name = "Unadjusted p-values",
yr.plot.size = 0.85,
yr.num.ticks = 5,
yr.axis.size = 20,
yr.axis.name.size = 17,
yr.bar.col = "white",
bottom.label.text.size = 7,
bottom.label.size = 0.27,
bottom.label.col = "white",
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
padding = 0.7,
legend.height = 0.09,
legend.width = 3,
legend.vspace = 0.01)
# For plotting the data:
deltaCT_dat <- mydata
names(deltaCT_dat) <- c(names(mydata)[1:5], paste0("Subj", 1:18, "_C"), paste0("Subj", 1:18, "_N"))
deltaCT_dat = deltaCT_dat %>% pivot_longer(
cols = starts_with("Subj"),
names_prefix = "Subj",
names_sep = "_",
names_to = c("Subject", "Gene_type")
) %>%
mutate(Subject = as.numeric(Subject)) %>%
group_by(MiR, Chr, strand, start_coordinate, centro, Subject) %>%
summarize(deltaCT = value[Gene_type == "C"] - value[Gene_type == "N"], .groups = "drop") %>%
pivot_wider(names_from = "Subject", values_from = "deltaCT", names_prefix = "Subj")
plotdat <- deltaCT_dat %>% inner_join(discoveries) %>% arrange(desc(pval))
delCT.matrix <- plotdat %>% dplyr::select(starts_with("Subj")) %>% as.matrix
rownames(delCT.matrix) <- plotdat$MiR
colnames(delCT.matrix) <- paste0('ID ', 1:18)
superheat::superheat(delCT.matrix,
# set heatmap color map
heat.pal = brewer.pal(5, "RdBu"),
heat.na.col = "grey50",
yr = plotdat$pval,
yr.plot.type = "bar",
yr.axis.name = "Unadjusted p-values",
yr.plot.size = 0.85,
yr.num.ticks = 5,
yr.axis.size = 20,
yr.axis.name.size = 17,
yr.bar.col = "white",
bottom.label.text.size = 7,
bottom.label.size = 0.27,
bottom.label.col = "white",
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
padding = 0.7,
legend.height = 0.09,
legend.width = 3,
legend.vspace = 0.01)
rm(list=ls())
# Need imputation or not
do.impute <- FALSE
source("analysis.R")
print(discoveries)
deltaCT_dat <- mydata
names(deltaCT_dat) <- c(names(mydata)[1:5], paste0("Subj", 1:18, "_C"), paste0("Subj", 1:18, "_N"))
deltaCT_dat = deltaCT_dat %>% pivot_longer(
cols = starts_with("Subj"),
names_prefix = "Subj",
names_sep = "_",
names_to = c("Subject", "Gene_type")
) %>%
mutate(Subject = as.numeric(Subject)) %>%
group_by(MiR, Chr, strand, start_coordinate, centro, Subject) %>%
summarize(deltaCT = value[Gene_type == "C"] - value[Gene_type == "N"], .groups = "drop") %>%
pivot_wider(names_from = "Subject", values_from = "deltaCT", names_prefix = "Subj")
plotdat <- deltaCT_dat %>% inner_join(discoveries) %>% arrange(desc(pval))
delCT.matrix <- plotdat %>% dplyr::select(starts_with("Subj")) %>% as.matrix
rownames(delCT.matrix) <- plotdat$MiR
colnames(delCT.matrix) <- paste0('ID ', 1:18)
# Plot presented in Figure 1
superheat::superheat(delCT.matrix,
# set heatmap color map
heat.pal = brewer.pal(5, "RdBu"),
heat.na.col = "grey50",
yr = plotdat$pval,
yr.plot.type = "bar",
yr.axis.name = "Unadjusted p-values",
yr.plot.size = 0.85,
yr.num.ticks = 5,
yr.axis.size = 20,
yr.axis.name.size = 17,
yr.bar.col = "white",
bottom.label.text.size = 7,
bottom.label.size = 0.27,
bottom.label.col = "white",
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
padding = 0.7,
legend.height = 0.09,
legend.width = 3,
legend.vspace = 0.01)
group_hist <- mydata %>% inner_join(group.info, by = c("Chr", "strand", "centro")) %>%
select(MiR, group_id, Chr, strand, centro, start_coordinate)
groups_dist <- group_hist %>% group_by(group_id) %>%
dplyr::summarise(distance = round({max(start_coordinate) - min(start_coordinate)}/
1e6, 3), count = n())
print(groups_dist)
groups_dist <- group_hist %>% group_by(group_id) %>%
dplyr::summarise(distance = round({max(start_coordinate) - min(start_coordinate)}/
1e6, 4), count = n())
print(groups_dist)
rm(list=ls())
do.impute <- TRUE
source("analysis.R")
print(discoveries)
